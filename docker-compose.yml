version: '3'

services:
  # Контейнер с Node.js
  server:
    build:
      context: ./server
      target: dev
    tty: true
    working_dir: /opt/server
    env_file:
      - .env
    ports:
      - "3000:3000"
      - "2000-2020:2000-2020" 
      - "4200:4200"  
    depends_on:
      - db
    networks:
      - app_network  # Подключаем к сети

  # Контейнер с базой данных
  db:
    image: postgres:14-alpine  # Используем postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=Videoconferencing
    volumes:
      - ./postgres:/var/lib/postgresql/data
    expose:
      - '5432'
    restart: always
    networks:
      - app_network  # Подключаем к сети

  nginx:
      build:
        context: .  # Контекст сборки — корень проекта
        dockerfile: nginx/Dockerfile
      container_name: proxy_nginx
      ports:
        - '80:80'
        - "443:443"
      restart: always
      volumes:
        - ./nginx:/etc/nginx/conf.d
        - /etc/letsencrypt:/etc/letsencrypt
      depends_on:
        - server
        - db
      networks:
        - app_network

  # Контейнер с pgadmin
  pgadmin:
    container_name: pgadmin
    depends_on:
      - db
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: info@proglib.io
      PGADMIN_DEFAULT_PASSWORD: qwertyuiop
    expose:
      - '80'
    restart: always
    networks:
      - app_network  # Подключаем к сети
    

# Определение единой сети
networks:
  app_network:
    driver: bridge  # Используем стандартный драйвер сети
